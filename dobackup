#! /usr/bin/python

import sys, os, subprocess, re

# 'source' is a dict giving info about the volume that is the source
# of the backup -- i.e. the volume containing the data to be backed
# up.  "name" should be a human-friendly name for the volume (it's
# used in messages to the user), and "path" should be the absolute
# path of the volume's mount point.
source = { "name" : "PHOTOS",   "path" : "/Volumes/PHOTOS" }

# 'dest' is just like source, but for the backup destination volume -- the place where the data
# is backed up to:
dest   = { "name" : "BACKUP",   "path" : "/Volumes/BACKUP" }

def bash_command(command):
    """Run command in a bash subshell, and return its output as a string"""
    return subprocess.Popen(['/bin/bash', '-c', command],
                            stdout=subprocess.PIPE).communicate()[0].strip()

def volume_is_mounted(volume):
    if not os.path.exists(volume):
        return False
    return True
    df = bash_command("df")
    if re.search(r"\s+" + volume + r"$", df):
        return True
    return False

def sys(command):
    #print command
    return os.system(command)

if not volume_is_mounted(source["path"]):
    print "\nThe %s drive does not appear to be connected; no backup done.\n" % source["name"]
    sys.exit(-1)

if not volume_is_mounted(dest["path"]):
    print "\nThe %s drive does not appear to be connected; no backup done.\n" % dest["name"]
    sys.exit(-1)

print "\nStarting backup at %s; do not disconnect the %s or %s drive.\n" % (bash_command("date"), source["name"], dest["name"])

sys("sudo rsync --archive --delete --ignore-errors --one-file-system %s/ %s" % (source["path"], dest["path"]))

print "Backup finished at %s." % bash_command("date")
